import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, DeleteResult } from 'typeorm';
import { Lexicon } from './lexicon.entity';
import { Grammar } from 'src/grammar/grammar.entity';
import { Translation } from 'src/translation/translation.entity';

@Injectable()
export class LexiconService {
	constructor(
		@InjectRepository(Lexicon)
		private lexiconRepo: Repository<Lexicon>,
		@InjectRepository(Grammar)
		private readonly grammarRepo: Repository<Grammar>,
		@InjectRepository(Translation) private readonly translationRepo: Repository<Translation>
	) { }

	/**
	 * Save a single word in the lexicon.
	 * @param wordData The word data to save.
	 * @returns The saved word.
	 */
	async addOne(wordData: Partial<Lexicon>): Promise<Lexicon> {
		let grammarEntity = null;

		if (wordData.grammar) {
			grammarEntity = this.grammarRepo.create(wordData.grammar);
			grammarEntity = await this.grammarRepo.save(grammarEntity);
			console.log('üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', grammarEntity);
		}

		const word = this.lexiconRepo.create({
			...wordData,
			grammar: grammarEntity ?? undefined,
			createdAt: Date.now(),
			translated: wordData.translations && wordData.translations.length > 0 ? true : false,
			postponed: wordData.postponed ?? false, // << üÜï
		});

		console.log('üõ† –°–æ–∑–¥–∞–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å Lexicon:', word);

		const saved = await this.lexiconRepo.save(word);
		console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:', saved);
		console.log("wordData.translations", wordData.translations);

		// üî• –¢–µ–ø–µ—Ä—å —Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã, –∏ –û–ë–ù–û–í–õ–Ø–ï–ú
		if (wordData.translations && wordData.translations.length > 0) {
			const translations = wordData.translations.map(t => this.translationRepo.create({
				source: t.source ?? '',
				target: t.target,
				sourceLang: t.sourceLang ?? 'fr',
				targetLang: t.targetLang ?? 'ru',
				meaning: t.meaning ?? '',
				example: t.example ?? null,
				lexicon: saved, // ‚¨ÖÔ∏è –í–ê–ñ–ù–û: –Ω–µ lexiconId, –∞ lexicon
			}));

			await this.translationRepo.save(translations);
			console.log('‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', translations);

			// ‚û°Ô∏è –õ–û–ì: –°–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –±–∞–∑–µ
			const savedTranslations = await this.translationRepo.find({ where: { lexicon: { id: saved.id } } });
			console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —Ä–µ–∞–ª—å–Ω–æ –≤ –ë–î –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', savedTranslations.length);


			await this.lexiconRepo.update(saved.id, { translated: true });
			saved.translated = true;
		}

		// üõ† –í–ê–ñ–ù–û: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å relations
	const fullSaved = await this.lexiconRepo.findOne({
		where: { id: saved.id },
		relations: ['grammar', 'translations'],
	});

	return fullSaved!;
	}


	/**
	 * Update a single word in the lexicon.
	 * @param id ID of the word to update.
	 * @param data The data to update the word with.
	 * @returns The updated word.
	 */
	async updateOne(id: number, data: Partial<Lexicon>) {
		await this.lexiconRepo.update({ id }, data);
		return this.lexiconRepo.findOne({ where: { id } });
	}


	/**
	 * Save multiple words in the lexicon at once.
	 * @param words An array of word data to save.
	 * @returns An array of saved words.
	 */
	async addMany(words: Partial<Lexicon>[]): Promise<Lexicon[]> {
		const savedWords: Lexicon[] = [];

		for (const wordData of words) {
			let grammarEntity = null;

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
			if (wordData.grammar) {
				grammarEntity = this.grammarRepo.create(wordData.grammar);
				grammarEntity = await this.grammarRepo.save(grammarEntity);
				console.log('üìö –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', grammarEntity);
			}

			const word = this.lexiconRepo.create({
				...wordData,
				grammar: grammarEntity ?? undefined, // –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ ‚Äî –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º
				createdAt: Date.now(),
				translated: false,
				postponed: wordData.postponed ?? false, // << üÜï
			});

			const saved = await this.lexiconRepo.save(word);
			console.log('üíæ –°–ª–æ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', saved);

			savedWords.push(saved);
		}

		return savedWords;
	}



	async markAsTranslated(id: number): Promise<void> {
		await this.lexiconRepo.update(id, { translated: true });
	}

	async getAllByGalaxyAndSubtopic(galaxy: string, subtopic: string): Promise<Lexicon[]> {
		const result = await this.lexiconRepo.find({
			where: { galaxy, subtopic },
			relations: ['translations', 'grammar'],
			order: { createdAt: 'DESC' },
		});
		return result;
	}

	async findByWord(word: string): Promise<Lexicon | null> {
		return this.lexiconRepo.findOne({ where: { word } });
	}

	async updateStatus(id: number, status: 'learned' | 'repeat' | null) {
		const word = await this.lexiconRepo.findOneBy({ id });
		if (!word) throw new NotFoundException('Word not found');
		word.status = status;
		return this.lexiconRepo.save(word);
	}

	async findById(id: number): Promise<Lexicon | null> {
		return await this.lexiconRepo.findOne({ where: { id } });
	}

	async updateRevealed(id: number, revealed: boolean): Promise<Lexicon> {
		return this.lexiconRepo.update({ id }, { revealed }).then(() =>
			this.lexiconRepo.findOne({ where: { id } })
		);
	}


	async deleteWord(id: number): Promise<DeleteResult> {
		const word = await this.lexiconRepo.findOne({
			where: { id },
			relations: ['grammar', 'translations'],
		});

		if (!word) {
			throw new NotFoundException(`Word with id ${id} not found`);
		}

		// –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
		if (word.translations && word.translations.length > 0) {
			await this.translationRepo.delete({ lexicon: { id: word.id } });
			console.log(`üóë –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞ id=${id}:`, word.translations.length);
		}

		// –£–¥–∞–ª—è–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
		if (word.grammar) {
			await this.grammarRepo.delete(word.grammar.id);
			console.log(`üóë –£–¥–∞–ª–µ–Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ id=${word.grammar.id}`);
		}

		// –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–∞—Ä—Ç–æ—á–∫—É
		const result = await this.lexiconRepo.delete(id);
		console.log(`üóë –£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ id=${id}`);

		return result;
	}



}
