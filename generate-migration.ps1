# generate-migration.ps1
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤ vocabulary-service

param(
    [Parameter(Mandatory=$true)]
    [string]$MigrationName
)

Write-Host "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: $MigrationName" -ForegroundColor Cyan

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (!(Test-Path "package.json")) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: package.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ vocabulary-service" -ForegroundColor Red
    exit 1
}

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
try {
    Write-Host "üìù –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: npm run migration:generate -- -d src/data-source.ts --name $MigrationName" -ForegroundColor Yellow
    npm run migration:generate -- -d src/data-source.ts --name $MigrationName
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è '$MigrationName' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!" -ForegroundColor Green
        Write-Host "üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ src/migrations/" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $_" -ForegroundColor Red
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
Write-Host "`nüìã –¢–µ–∫—É—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏:" -ForegroundColor Blue
Get-ChildItem -Path "src/migrations" -Filter "*.ts" | Sort-Object Name | ForEach-Object {
    Write-Host "   üìÑ $($_.Name)" -ForegroundColor Gray
}

Write-Host "`nüí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .\run-migration.ps1" -ForegroundColor Cyan 